/*
 * Copyright (c) 2012 - 2017, Kurt Cancemi (kurt@x64architecture.com)
 *
 * This file is part of Wnmp.
 *
 *  Wnmp is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Wnmp is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Wnmp.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.IO;

using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Operators;
using Org.BouncyCastle.Crypto.Prng;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.X509;

namespace Wnmp
{
    class CertGen
    {
        private const string NetscapeCommentExtOid = "2.16.840.1.113730.1.13";
        private SecureRandom random;
        public CertGen()
        {
            var randomGenerator = new CryptoApiRandomGenerator();
            random = new SecureRandom(randomGenerator);
        }

        private AsymmetricCipherKeyPair CreateRSAKeyPair(int keysize)
        {
            var keyGenerationParameters = new KeyGenerationParameters(random, keysize);
            var keyPairGenerator = new RsaKeyPairGenerator();
            keyPairGenerator.Init(keyGenerationParameters);
            return keyPairGenerator.GenerateKeyPair();
        }

        private X509Certificate GenerateX509Certificate(AsymmetricCipherKeyPair KeyPair, DateTime NotBefore, DateTime NotAfter, string DN)
        {
            var certificateGenerator = new X509V3CertificateGenerator();

            // Assign public key
            certificateGenerator.SetPublicKey(KeyPair.Public);
            // Set serial number
            var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);
            certificateGenerator.SetSerialNumber(serialNumber);
            // Set validity timeframe
            certificateGenerator.SetNotBefore(NotBefore);
            certificateGenerator.SetNotAfter(NotAfter);
            // set subject and issuer DN
            var subjectDN = new X509Name(DN);
            var issuerDN = subjectDN;
            certificateGenerator.SetIssuerDN(issuerDN);
            certificateGenerator.SetSubjectDN(subjectDN);
            // Add netscape-comment extension
            certificateGenerator.AddExtension(NetscapeCommentExtOid, false, new DerUtf8String("Generated by Wnmp"));
            // Sign cert with SHA256
            var signatureFactory = new Asn1SignatureFactory("SHA256WITHRSA", KeyPair.Private, random);

            return certificateGenerator.Generate(signatureFactory);
        }

        public bool GenerateSelfSignedCertificate(string CN, int keysize, string keyfile, string certfile)
        {
            string DN = String.Format("CN={0}", CN);
            AsymmetricCipherKeyPair RSAKeyPair = CreateRSAKeyPair(keysize);
            var notBefore = DateTime.UtcNow;
            var notAfter = notBefore.AddYears(10);

            var x509cert = GenerateX509Certificate(RSAKeyPair, notBefore, notAfter, DN);
            using (var sw = new StreamWriter(keyfile))
            {
                PemWriter pwriter = new PemWriter(sw);
                pwriter.WriteObject(RSAKeyPair.Private);
            }

            using (var sw = new StreamWriter(certfile))
            {
                PemWriter pwriter = new PemWriter(sw);
                pwriter.WriteObject(x509cert);
            }

            return true;
        }
    }
}